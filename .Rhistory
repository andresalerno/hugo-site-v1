blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(3)
blogdown:::serve_site()
blogdown:::new_post_addin()
library(RODBC)
install.packages(c("RODBC", "RODBCDBI"))
setwd("C:/Users/andre/r_programming/grupo_sifra/praca_pagto")
library(RODBC)
library(RODBC)
db<-file.path("bd_cep_geo.accdb")
channel<-odbcConnectAccess2007(db)
data<-sqlFetch(channel,"stud")
data
db<-file.path("bd_cep_geo.accdb")
channel<-odbcConnectAccess2007(db)
library(RODBC)
db<-file.path("testeAccess.accdb")
channel<-odbcConnectAccess2007(db)
odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=D:/SampleDB1/sampleDB1.mdb")
odbcDriverConnect(connection = "testeDSN")
odbcDriverConnect(connection = "teste_dsn")
library(RODBC)
dcon <- dbConnect(odbc::odbc(), "teste_dsn")
library(RODBC)
dcon <- dbConnect(odbc::odbc(), "teste_dsn")
?dbConnect
??dbConnect
install.packages("RODBC")
dcon <- dbConnect(odbc::odbc(), "teste_dsn")
dcon <- odbcConnectAccess("testeAccess.accdb")
library(RODBC)
dcon <- odbcConnectAccess("testeAccess.accdb")
odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=D:/SampleDB1/sampleDB1.mdb")
odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)}")
install.packages("svSocket")
access_query_32 <- function(db_table = "qryData_RM", table_out = "data_access") {
library(svSocket)
# variables to make values uniform
sock_port <- 8642L
sock_con <- "sv_con"
ODBC_con <- "a32_con"
db_path <- "~/path/to/access.accdb"
if (file.exists(db_path)) {
# build ODBC string
ODBC_str <- local({
s <- list()
s$path <- paste0("DBQ=", gsub("(/|\\\\)+", "/", path.expand(db_path)))
s$driver <- "Driver={Microsoft Access Driver (*.mdb, *.accdb)}"
s$threads <- "Threads=4"
s$buffer <- "MaxBufferSize=4096"
s$timeout <- "PageTimeout=5"
paste(s, collapse=";")
})
# start socket server to transfer data to 32 bit session
startSocketServer(port=sock_port, server.name="access_query_32", local=TRUE)
# build expression to pass to 32 bit R session
expr <- "library(svSocket)"
expr <- c(expr, "library(RODBC)")
expr <- c(expr, sprintf("%s <- odbcDriverConnect('%s')", ODBC_con, ODBC_str))
expr <- c(expr, sprintf("if('%1$s' %%in%% sqlTables(%2$s)$TABLE_NAME) {%1$s <- sqlFetch(%2$s, '%1$s')} else {%1$s <- 'table %1$s not found'}", db_table, ODBC_con))
expr <- c(expr, sprintf("%s <- socketConnection(port=%i)", sock_con, sock_port))
expr <- c(expr, sprintf("evalServer(%s, %s, %s)", sock_con, table_out, db_table))
expr <- c(expr, "odbcCloseAll()")
expr <- c(expr, sprintf("close(%s)", sock_con))
expr <- paste(expr, collapse=";")
# launch 32 bit R session and run expressions
prog <- file.path(R.home(), "bin", "i386", "Rscript.exe")
system2(prog, args=c("-e", shQuote(expr)), stdout=NULL, wait=TRUE, invisible=TRUE)
# stop socket server
stopSocketServer(port=sock_port)
# display table fields
message("retrieved: ", table_out, " - ", paste(colnames(get(table_out)), collapse=", "))
} else {
warning("database not found: ", db_path)
}
}
getwd()
access_query_32 <- function(db_table = "qryData_RM", table_out = "data_access") {
library(svSocket)
# variables to make values uniform
sock_port <- 8642L
sock_con <- "sv_con"
ODBC_con <- "a32_con"
db_path <- "C:/Users/andre/r_programming/grupo_sifra/praca_pagto/testeAccesss.accdb"
if (file.exists(db_path)) {
# build ODBC string
ODBC_str <- local({
s <- list()
s$path <- paste0("DBQ=", gsub("(/|\\\\)+", "/", path.expand(db_path)))
s$driver <- "Driver={Microsoft Access Driver (*.mdb, *.accdb)}"
s$threads <- "Threads=4"
s$buffer <- "MaxBufferSize=4096"
s$timeout <- "PageTimeout=5"
paste(s, collapse=";")
})
# start socket server to transfer data to 32 bit session
startSocketServer(port=sock_port, server.name="access_query_32", local=TRUE)
# build expression to pass to 32 bit R session
expr <- "library(svSocket)"
expr <- c(expr, "library(RODBC)")
expr <- c(expr, sprintf("%s <- odbcDriverConnect('%s')", ODBC_con, ODBC_str))
expr <- c(expr, sprintf("if('%1$s' %%in%% sqlTables(%2$s)$TABLE_NAME) {%1$s <- sqlFetch(%2$s, '%1$s')} else {%1$s <- 'table %1$s not found'}", db_table, ODBC_con))
expr <- c(expr, sprintf("%s <- socketConnection(port=%i)", sock_con, sock_port))
expr <- c(expr, sprintf("evalServer(%s, %s, %s)", sock_con, table_out, db_table))
expr <- c(expr, "odbcCloseAll()")
expr <- c(expr, sprintf("close(%s)", sock_con))
expr <- paste(expr, collapse=";")
# launch 32 bit R session and run expressions
prog <- file.path(R.home(), "bin", "i386", "Rscript.exe")
system2(prog, args=c("-e", shQuote(expr)), stdout=NULL, wait=TRUE, invisible=TRUE)
# stop socket server
stopSocketServer(port=sock_port)
# display table fields
message("retrieved: ", table_out, " - ", paste(colnames(get(table_out)), collapse=", "))
} else {
warning("database not found: ", db_path)
}
}
View(access_query_32)
View(access_query_32)
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE, warning = FALSE)
#setwd("C:/Users/andre/r_programming/multiple_logistic_regression")
library(gmodels)
library(corrgram)
library(nortest)
library(ineq)
library(caret)
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE, warning = FALSE)
setwd("C:/Users/andre/r_programming/multiple_logistic_regression")
library(gmodels)
library(corrgram)
library(nortest)
library(ineq)
library(caret)
data <- read.csv('RestaurantTips.csv',sep=",",header=TRUE, stringsAsFactors = FALSE)
setwd("C:/Users/andre/r_programming/multiple_logistic_regression")
setwd("C:/Users/andre/r_programming/multiple_logistic_regression")
setwd("C:/Users/andre/r_programming/multiple_logistic_regression")
data <- read.csv('RestaurantTips.csv',sep=",",header=TRUE, stringsAsFactors = FALSE)
getwd()
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE, warning = FALSE)
setwd("C:/Users/andre/r_programming/multiple_logistic_regression")
library(gmodels)
library(corrgram)
library(nortest)
library(ineq)
library(caret)
data <- read.csv('RestaurantTips.csv',sep=",",header=TRUE, stringsAsFactors = FALSE)
View(data)
data <- read.csv('RestaurantTips.csv',sep=",",header=TRUE, stringsAsFactors = FALSE)
data <- read.csv('RestaurantTips.csv',sep=",",header=TRUE, stringsAsFactors = FALSE)
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE, warning = FALSE)
setwd("C:/Users/andre/r_programming/multiple_logistic_regression")
library(gmodels)
library(corrgram)
library(nortest)
library(ineq)
library(caret)
names(data)
?read.csv
m<-matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3)
m <- cbind(m, sumRow(m))
m <- cbind(m, rowSums(m))
m
m <- rbind(m, colSums(m))
m
t(m)
det(m)
eigen(m)
load("C:/Users/andre/r_programming/blogdown/.RData")
setwd("C:/Users/andre/r_programming/blogdown")
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
pwd
getwd()
setwd("C:/Users/andre/r_programming/blogdown")
servr::daemon_stop(1)
blogdown::serve_site()
blogdown::build_site()
servr::daemon_stop(2)
blogdown::build_site()
blogdown::serve_site()
servr::daemon_stop(3)
blogdown::build_site()
blogdown::serve_site()
getwd()
servr::daemon_stop(4)
blogdown::build_site()
blogdown::serve_site()
blogdown:::new_post_addin()
n <- 10
n + 5
n <- 10
x <- 4
y <- 3
x + y
x - y
n + 5
x * y
x / y
x ** y
x * pi
exp(y)
sign(y)
sign(-y)
sign(y)
max(x,y)
min(x,y)
factorial(y)
sqrt(y)
z <- x + y
z <- x + y
z <- x + y
z
x > y
x > y
x + y != 8
x > y
x + y != 8
x == y
x > y
x + y != 8
x == y
x & y > 10
x > y
x + y != 8
x == y
x & y > 6
x > y
x + y != 8
x == y
x & y > 2
x > y
x + y != 8
x == y
x & y > 3
x > y
x + y != 8
x == y
x & y > 2
isTRUE(x < y)
x > y
x + y != 8
x == y
x & y > 2
isTRUE(x < y)
blogdown::build_site()
save.image("C:/Users/andre/r_programming/blogdown/env.RData")
blogdown::build_site()
source(env.RData)
file("env.RData")
blogdown::build_site()
update.packages(ask = FALSE, checkBuilt = TRUE)
blogdown::build_site()
blogdown::build_site()
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE)
source(../"env.RData")
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE)
source(../../"env.RData")
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE)
source(/../../"env.RData")
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE)
source(../../"env.RData")
getwd()
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE)
source(C:/Users/andre/r_programming/blogdown/"env.RData")
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE)
source("C:/Users/andre/r_programming/blogdown/env.RData")
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE)
source("C://Users//andre//r_programming//blogdown//env.RData")
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE)
source("C:\Users\andre\r_programming\blogdown\env.RData")
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE)
source("C:\\Users\\andre\\r_programming\\blogdown\\env.RData")
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE)
load("C:/Users/andre/r_programming/blogdown/env.RData")
a <- c(1,3,5,8)
a
save.image("C:/Users/andre/r_programming/blogdown/env.RData")
class(a)
a + 3 ## adding 3
b <- c(1:10) # consecutive numbers
b
3 + 6
1000 / 100
5 * 8
6 * 8
c <- seq(1, 5, by = 0.5)
c
d <- seq(1, 5, length.out = 22)
d
e <- rep(22, 4)
e
a[-3]
a[2] # choosing second element
a[1:2] # choosing sequence
a[a>2 & a< 6]
a[c(TRUE, FALSE, FALSE, TRUE)]
sum(a)
prod(a)
length(a)
a[1] <- 4
a
64000 / 200644
save.image("C:/Users/andre/r_programming/blogdown/env.RData")
f <- c(1,4,7,9,8,1)
f <- factor(f)
f
levels(f)
factor(f, exclude = 4)
g <- c(1,2,7,7,1,2,2,7,1,7)
g <- factor(g, levels = c(1,2,7), ordered = TRUE)
g
h <- "This is our first string"
class(h)
nchar(h)
substring(h, 4)
substring(h, 1,4)
strsplit(h, " ")
grep("our", h)
grep("our" & " sure", h)
grep(c("our","sure"), h)
grep("our", h)
grep("book", h)
regexpr("our",h)
tolower(h)
toupper(h)
sub("our", "my", h)
paste(h, "My book", sep = ":")
paste(h, "My book", sep = ":")
paste(h, "My book", sep = " : ")
i <- matriz(c(1,2,3,4,5,6), nrow = 2, ncol = 3)
i <- matriz(c(1,2,3,4,5,6), nrow = 2, ncol = 3)
i <- matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3)
i
i <- matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3, byrow = TRUE)
i
i <- matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3, byrow = TRUE, dimnames = list(c("Obs1, Obs2"), c("Col1", "Col2", "Col3")))
i <- matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3, byrow = TRUE, dimnames = list(c("Obs1, Obs2"), c("Col1", "Col2", "Col3")))
i <- matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3, byrow = TRUE, dimnames = list(c("Obs1", "Obs2"), c("Col1", "Col2", "Col3")))
i
j <- rbind(1:3, 4:6, 10:12)
j
k <- cbind(1:3, 4:6, 10:12)
k
l <- array(c(1,2,3,4,5,6), dim = c(2,3))
l
l[1,2]
diag(l)
dim(l)
colSums(l)
rowSums(l)
t(l)
det(l) # matrix determinant
det(l) # matrix determinant
eigen(l)
m <- list(1:4, "book", 1+4i)
m
m[[1]]
m[[1]][1]
m[[1]][2]
o <- c(1, 3, 5)
p <- c("red", "yellow", "blue")
q <- c(TRUE, FALSE, TRUE)
df <- data.frame(o,p,q)
df
df[2,1]
df
df[,p]
df[,"p"]
data(iris)
r <- data(iris)
ncol(r)
r <- data(iris)
ncol(r)
r <- data("iris")
ncol(r)
r <- iris
ncol(r)
nrow(r)
head(r)
head(r, n = 3)
head(r)
head(r, n = 2)
head(r, 2)
str(r)
squaredNum <- function(number){
s <- number^2
return(s)
}
squaredNum(4)
squaredNum(25)
if (x < y){
print("x is lesser than y")
} else {
print("x is greater than y")
}
if (x < y){
print("x is lesser than y")
} else if (x == y){
print("x is equal to y")
} else {
print("x is greater than y")
}
for (i in 1:10) {
print(i)
}
t <- matrix(1:6, 2, 3)
t
t <- matrix(1:6, nrow = 2, ncol = 3)
t
for (i in seq(nrow(t))) {
for(j in seq(ncol(t))){
print(t[i,j])
}
}
rev(b)
blogdown::build_site()
save.image("C:/Users/andre/r_programming/blogdown/env.RData")
blogdown::serve_site()
servr::daemon_stop(6)
blogdown::serve_site()
